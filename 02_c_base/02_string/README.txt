Реализация некоторых функций из string.h и stdlib.h

--------------------------------------------------------------------------------
I) mem* функции (работают с void буферами)

memchr
memrchr

memcmp

memcpy
memmove

memset

--------------------------------------------------------------------------------
II) str* функции (работают с char* массивами с нулём на конце)

strlen
strnlen

strchr
strrchr

strcmp
strncmp

strcpy
strncpy

strspn
strcspn

strpbrk
strstr

strdup
strndup

strtok                    \
strtok_r (не обязательно) / Ебельные, делать предпоследними.

--------------------------------------------------------------------------------
III) Конвертирующие функции (работают с char* массивами с нулём на конце)

strtol
strtoll

strtoul
strtoull

strtof    \
strtod    - Ебельные, делать можно в последний момент.
strtold   /

--------------------------------------------------------------------------------
IV) format-функции (Самые ебельные, делать в последний момент)

snprintf
fprintf (не обязательно) \
dprintf (не обязательно) / Аналогичны snprintf, только вывод не в строку, а в FILE или файловый дескриптор.

sscanf
fscanf (не обязательно) \
scanf  (не обязательно) / Аналогичны sscanf, только вывод не из строки, а из конкретного FILE или строго из STDIN

Чтобы быстрее понять, что делает snprintf, сперва следует понять, что printf по-сути то же самое.
Разница их в том, что printf форматирует переменные определённым образом и выводит в stdout, а snprintf - в строку.
При этом sprintf - без проверки на кол-во байтов в буфере.
dprintf - выводит в файловый дескриптор, а fprintf - в FILE.

Далее важно понять, что есть format-string.
Общий формат format-string таков:
%флаги_ширина.точность_модификатор длинны_cпецификатор
Нижние подчеркивания и пробелы мысленно из строки убрать.
Пример вызова функции с формат-строкой:

  snprintf(buf, n, "Число % -+0#10.10lld", 10);

В буфер buf размером n будет помещена строка "Число +0000000010".

То есть:
Символ процента обозначает, что дальше идёт описание форматирования некоторого значения.
Флаги модифицируют форматирование определённым образом.
Ширина определяет сколько байт значения вписать в строку.
Точность показывает сколько цифр после точки показать (для float'ов).
Также точность может быть указана как .* (`man sscanf`, `man snprintf`)

Модификатор длинны уточняет размер типа, а спецификатор - сам тип.
Например, чтобы вывести long long int надо указать модифицкатор длинны ll и спецификатор d: "%lld"
Чтобы вписать в строку сам процент следует использовать "%%".
Чтобы вывести некоторую строку: "%s".

Реализовать следующие флаги:
' '
'-'
'+'
'0'
'#'

Ширина и точность выражены числами, разделенными точкой. Точность может быть указана без ширины и наоборот.

Модификаторы длинны реализовать следующие:
hh
h
l
ll
L
z

Спецификаторы формата реализовать следующие:
c
d, i
o, u, x, X
e, E
f, F
g, G
s
p
n

Некоторые из вышеперечисленных значений ведут себя по разному в *printf и *scanf.
Читать man, сравнивать поведение тестами.

Поддержку wchar_t реализовывать необязательно.

--------------------------------------------------------------------------------
- Описания всех функций, принимаемые аргументы и возвращаемые типы смотреть в мануале:
  `man strlen`
  `man snprintf`
  `man strtok`
  (Некоторые функции, однако, не стандартные, их описания и аргументы надо будет гуглить)
  В самом начале ман-страницы будет пример объявления искомой функции и её описание.
  Чтобы функции не конфликтовали с библиотечными аналогами, можно к названию добавить префикс, например 'lstr_'
  Например - lstr_strlen.

- Для сборки использовать Makefile, собирать в статическую или динамическую библиотеку.

- Реализации функций должны быть идентичны библиотечным. Есть резон покрыть юнит-тестами, для этого можно использовать
  библиотеку check.h
  Рекомендую написать динамические тесты, которые N раз генерируют рандомную строку, скармливают её
  библиотечным и самопальным реализациям функций и сравнивают результат.

- Рекомендуемая структура проекта:
  02_string/
            Makefile
            src/        <- исходный код
            out/        <- сюда пущай выплёвывается библиотека
            test/       <- код юнит-тестов

- Прочие рекомендации прочекать в README для 01_bash. (ебал всё это повторно расписывать)

